<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Hexo</title>
    <link href="http://example.com" />
    <updated>2022-01-20T11:12:07.641Z</updated>
    <entry>
        <id>http://example.com/2022/01/20/daxian%201.3/</id>
        <title></title>
        <link rel="alternate" href="http://example.com/2022/01/20/daxian%201.3/"/>
        <content type="html">&lt;hr&gt;
&lt;h2 id=&#34;title-第三天http通信基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#title-第三天http通信基础&#34;&gt;#&lt;/a&gt; title = 第三天：HTTP 通信基础&lt;/h2&gt;
&lt;h2 id=&#34;一-web介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-web介绍&#34;&gt;#&lt;/a&gt; 一. WEB 介绍&lt;/h2&gt;
&lt;h3 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;Web（World Wide Web）即全球广域网，也称为万维网，它是一种基于超文本和 HTTP 的、全球性的、动态交互的、跨平台的分布式图形信息系统。是建立在 Internet 上的一种网络服务，为浏览者在 Internet 上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超级链接 Internet 上的信息节点组织成一个互为关联的网状结构。&lt;/p&gt;
&lt;p&gt;简单来说，web 是 web 页面的载体，我们通过浏览器上网都是 Web。&lt;/p&gt;
&lt;h3 id=&#34;通信流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通信流程&#34;&gt;#&lt;/a&gt; 通信流程&lt;/h3&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7cctxA.png&#34; alt=&#34;7cctxA.png&#34;&gt;]&lt;/p&gt;
&lt;p&gt;1：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS13d3ctMHYxZW42NXouYmFpZHUuY29t&#34;&gt;输入 www.baidu.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2：解析成 IP 地址：192.168.0.1&lt;/p&gt;
&lt;p&gt;3：浏览器通过该 IP 访问 web 服务器获取 web 资源&lt;/p&gt;
&lt;p&gt;4：再返回给客户端&lt;/p&gt;
&lt;p&gt;5：最后呈现在用户面前&lt;/p&gt;
&lt;h2 id=&#34;二域名系统dns&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二域名系统dns&#34;&gt;#&lt;/a&gt; 二。域名系统 DNS&lt;/h2&gt;
&lt;h3 id=&#34;简介-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介-2&#34;&gt;#&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;DNS 是一个简单的请求 - 响应协议，是将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS 使用 TCP 和 UDP 协议的 53 端口。&lt;/p&gt;
&lt;h3 id=&#34;请求与响应&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#请求与响应&#34;&gt;#&lt;/a&gt; 请求与响应&lt;/h3&gt;
&lt;h4 id=&#34;dns记录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dns记录&#34;&gt;#&lt;/a&gt; DNS 记录&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A 记录&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;返回域名对应的 IPv4 地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NS 记录&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;域名服务器&lt;/li&gt;
&lt;li&gt;返回该域名由哪台域名服务器解析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PTR 记录&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;反向记录&lt;/li&gt;
&lt;li&gt;从 IP 地址到域名的记录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MX 记录&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;电子邮件交换记录&lt;/li&gt;
&lt;li&gt;记录邮件域名对应的 IP 地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;响应码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#响应码&#34;&gt;#&lt;/a&gt; 响应码&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//NOERROR(无错误) 		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    No error condition 		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    无错误条件  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//FORMERR(格式错误) 		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Format error - The name server was unable to interpret the query     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    格式错误 - 名称服务器无法解释查询 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//SERVFAIL(服务失败) 		S&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    erver failure - The name server was unable to process this query due to a problem &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; the name server&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    服务器故障 - 由于名称服务器出现问题，名称服务器无法处理此查询 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//NXDOMAIN&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    this code signifies that the domain name referenced &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; the query does &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; exist 		此代码表示查询中引用的域名不存在      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//NOTIMP(未实现) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Not Implemented - The name server does &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; support the requested kind of query&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    未实现 - 名称服务器不支持请求的查询类型 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//REFUSED(拒绝)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Refused - The name server refuses to perform the specified operation &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; policy reasons 	拒绝 - 名称服务器出于策略原因拒绝执行指定的操作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;域名系统工作原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#域名系统工作原理&#34;&gt;#&lt;/a&gt; 域名系统工作原理&lt;/h3&gt;
&lt;h4 id=&#34;解析过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析过程&#34;&gt;#&lt;/a&gt; 解析过程&lt;/h4&gt;
&lt;p&gt;DNS 解析过程是递归查询的，具体过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户要访问域名 www.example.com 时，先查看本机 hosts 是否有记录或者本机是否有 DNS 缓存，如果有，直接返回结果，否则向递归服务器查询该域名的 IP 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归缓存为空时，首先向根服务器查询 com 顶级域的 IP 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根服务器告知递归服务器 com 顶级域名服务器的 IP 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归向 com 顶级域名服务器查询负责 example.com 的权威服务器的 IP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;com 顶级域名服务器返回相应的 IP 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归向 example.com 的权威服务器查询 www.example.com 的地址记录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;权威服务器告知 www.example.com 的地址记录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归服务器将查询结果返回客户端&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.nlark.com/yuque/0/2021/png/2336202/1625625284218-64866d9c-d553-4b02-b571-c0944637f847.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;域传送&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#域传送&#34;&gt;#&lt;/a&gt; 域传送&lt;/h4&gt;
&lt;p&gt;DNS 服务器可以分为主服务器、备份服务器和缓存服务器。域传送是指备份服务器从主服务器拷贝数据，并使用得到的数据更新自身数据库。域传送是在主备服务器之间同步数据库的机制。&lt;/p&gt;
&lt;h3 id=&#34;服务器类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器类型&#34;&gt;#&lt;/a&gt; 服务器类型&lt;/h3&gt;
&lt;h4 id=&#34;根服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根服务器&#34;&gt;#&lt;/a&gt; 根服务器&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;根服务器是 DNS 的核心，负责互联网顶级域名的解析，用于维护域的权威信息，并将 DNS 查询引导到相应的域名服务器。&lt;/li&gt;
&lt;li&gt;根服务器在域名树中代表最顶级的 “.” 域， 一般省略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;全球只有 13 台根服务器，13 台 IPv4 根服务器的域名标号为 a 到 m，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1hLXB4OGEucm9vdC1zZXJ2ZXJzLnhuLS1vcmdtLXNtOWYucm9vdC1zZXJ2ZXJzLm9yZw==&#34;&gt;即 a.root-servers.org 到 m.root-servers.org&lt;/span&gt;，所有服务器存储的数据相同，仅包含 ICANN (互联网名称与数字地址分配机构) 批准的 TLD (顶级域) 域名权威信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;权威服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#权威服务器&#34;&gt;#&lt;/a&gt; 权威服务器&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;权威服务器上存储域名 Zone 文件，ZONE 文件是 DNS 上保存域名配置的文件，维护域内域名的权威信息，递归服务器可以从权威服务器获得 DNS 查询的资源记录。&lt;/li&gt;
&lt;li&gt;权威服务器需要在所承载的域名所属的 TLD 管理局注册，同一个权威服务器可以承载不同 TLD 域名，同一个域也可以有多个权威服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;递归服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归服务器&#34;&gt;#&lt;/a&gt; 递归服务器&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;递归服务器负责接收用户的查询请求，进行递归查询并响应用户查询请求。在初始时递归服务器仅有记录了根域名的 Hint 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关漏洞&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#相关漏洞&#34;&gt;#&lt;/a&gt; 相关漏洞&lt;/h3&gt;
&lt;h4 id=&#34;dns劫持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dns劫持&#34;&gt;#&lt;/a&gt; DNS 劫持&lt;/h4&gt;
&lt;p&gt;DNS 劫持有多种方式，比较早期的攻击方式是通过攻击域名解析服务器，或是伪造 DNS 响应的方法，来将域名解析到恶意的 IP 地址。&lt;/p&gt;
&lt;p&gt;随着互联网应用的不断发展，出现了基于废弃记录的劫持方式。这种方式发生的场景是次级域名的解析记录指向第三方资源，而第三方资源被释放后，解析记录并没有取消，在这种场景下，可以对应申请第三方资源，以获取控制解析记录的能力。&lt;/p&gt;
&lt;h4 id=&#34;拒绝服务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拒绝服务&#34;&gt;#&lt;/a&gt; 拒绝服务&lt;/h4&gt;
&lt;p&gt;DNS 服务通常会开启 UDP 端口，当 DNS 服务器拥有大量二级域 NS 记录时，通过 DNS 的 UDP 反射攻击可以实现高倍的拒绝服务。&lt;/p&gt;
&lt;h2 id=&#34;三http协议&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三http协议&#34;&gt;#&lt;/a&gt; 三.HTTP 协议&lt;/h2&gt;
&lt;p&gt;超文本传输协议（HTTP，HyperText Transfer Protocol) 是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。&lt;/p&gt;
&lt;h3 id=&#34;http请求类型介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#http请求类型介绍&#34;&gt;#&lt;/a&gt; HTTP 请求类型介绍&lt;/h3&gt;
&lt;p&gt;​	HTTP 协议中共定义了八种方法或者叫 “动作” 来表明对 Request-URI 指定的资源的不同操作方式，以下为常用的 6 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;OPTIONS：返回服务器所支持的 HTTP 请求方法。&lt;/li&gt;
&lt;li&gt;HEAD：与 GET 请求相一致的响应，但只返回头部信息，响应体将不会被返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;GET：向特定的资源&lt;strong&gt;发出请求&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;POST：向指定资源&lt;strong&gt;提交数据&lt;/strong&gt;进行处理请求。数据被包含在请求体中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;PUT：向指定资源位置&lt;strong&gt;上传&lt;/strong&gt;其最新内容。&lt;/li&gt;
&lt;li&gt;DELETE：请求服务器&lt;strong&gt;删除指定资源&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;get和post区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#get和post区别&#34;&gt;#&lt;/a&gt; GET 和 POST 区别&lt;/h3&gt;
&lt;h4 id=&#34;1url可见性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1url可见性&#34;&gt;#&lt;/a&gt; 1：URL 可见性&lt;/h4&gt;
&lt;p&gt;​      i：Get 传参方式是通过地址栏 URL 传递，是可以直接看到 get 传递的参数，get 把请求  的数据在 URL 后通过？连接，通过 &amp;amp; 进行参数分割。&lt;/p&gt;
&lt;p&gt;​      ii：Post 传参方式参数 URL 不可见，post 将从参数存放在 HTTP 的包体内。&lt;/p&gt;
&lt;h4 id=&#34;2传输数据大小&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2传输数据大小&#34;&gt;#&lt;/a&gt; 2：传输数据大小&lt;/h4&gt;
&lt;p&gt;​     i：Get 传递数据是通过 URL 进行传递，对传递的数据长度是受到 URL 大小的限制，URL 最大长度是 2048 个字符。&lt;/p&gt;
&lt;p&gt;​     ii：Post 没有长度限制。&lt;/p&gt;
&lt;h4 id=&#34;3后退页面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3后退页面&#34;&gt;#&lt;/a&gt; 3：后退页面&lt;/h4&gt;
&lt;p&gt;​     Get 后退不会有影响，Post 后退会重新进行提交&lt;/p&gt;
&lt;h4 id=&#34;4缓存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4缓存&#34;&gt;#&lt;/a&gt; 4：缓存&lt;/h4&gt;
&lt;p&gt;​     i：Get 请求可以被缓存，请求的记录会留在历史记录中。&lt;/p&gt;
&lt;p&gt;​     ii：Post 不可以被缓存，请求不会留在历史记录。&lt;/p&gt;
&lt;h4 id=&#34;5编码方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5编码方式&#34;&gt;#&lt;/a&gt; 5：编码方式&lt;/h4&gt;
&lt;p&gt;​      i：Get 请求只支持 URL 编码。&lt;/p&gt;
&lt;p&gt;​      ii：Post 支持多种编码方式。&lt;/p&gt;
&lt;h4 id=&#34;6字符类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6字符类型&#34;&gt;#&lt;/a&gt; 6：字符类型&lt;/h4&gt;
&lt;p&gt;​      i：Get 只支持 ASCII 字符。&lt;/p&gt;
&lt;p&gt;​      ii：Post 没有字符类型限制。&lt;/p&gt;
&lt;h3 id=&#34;http请求响应过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#http请求响应过程&#34;&gt;#&lt;/a&gt; HTTP 请求响应过程&lt;/h3&gt;
&lt;h4 id=&#34;1域名解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1域名解析&#34;&gt;#&lt;/a&gt; 1：域名解析&lt;/h4&gt;
&lt;p&gt;​       首先浏览器会解析域名（准确的叫法应该是主机名）得到对应的 IP 地址，那怎么解析到对应的 IP 地址？&lt;/p&gt;
&lt;p&gt;​       ① 浏览器会首先搜索浏览器自身的 DNS 缓存（缓存时间比较短，大概只有 1 分钟，且只能容纳 1000 条缓存），看自身的缓存中是否有该域名对应的条目，而且没有过期，如果有且没有过期则解析到此结束；&lt;/p&gt;
&lt;p&gt;​       ② 如果浏览器自身的缓存里面没有找到对应的条目，那么浏览器会搜索操作系统自身的 DNS 缓存，如果找到且没有过期则停止搜索解析到此结束；&lt;/p&gt;
&lt;p&gt;​       ③ 如果在 Windows 系统的 DNS 缓存也没有找到，那么尝试读取 hosts 文件（位于 C:\Windows\System32\drivers\etc），看看这里面有没有该域名对应的 IP 地址，如果有则解析成功；&lt;/p&gt;
&lt;p&gt;​       ④ 如果在 hosts 文件中也没有找到对应的条目，浏览器就会发起一个 DNS 的系统调用，就会向本地配置的首选 DNS 服务器（一般是电信运营商提供的，也可以使用像 Google 提供的 DNS 服务器）发起域名解析请求（通过的是 UDP 协议向 DNS 的 53 端口发起请求，这个请求是递归的请求，也就是运营商的 DNS 服务器必须得提供给我们该域名的 IP 地址），运营商的 DNS 服务器首先查找自身的缓存，找到对应的条目，且没有过期，则解析成功。如果没有找到对应的条目，则有运营商的 DNS 代我们的浏览器发起迭代 DNS 解析请求，它首先是会找根域的 DNS 的 IP 地址（这个 DNS 服务器都内置 13 台根域的 DNS 的 IP 地址），然后进一步请求； 正常情况下通过这四步基本就能解析域名获得 IP 了。&lt;/p&gt;
&lt;h4 id=&#34;2发起tcp3次握手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2发起tcp3次握手&#34;&gt;#&lt;/a&gt; 2：发起 TCP3 次握手&lt;/h4&gt;
&lt;p&gt;​        拿到域名对应的 IP 地址之后，User-Agent（一般是指浏览器）会以一个随机端口（1024 &amp;lt; 端口 &amp;lt; 65535）向服务器的 WEB 程序的 80 端口发起 TCP 的连接请求。这个连接请求（原始的 http 请求经过 TCP/IP4 层模型的层层封包）到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的 TCP/IP 协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过 Netfilter 防火墙（属于内核的模块）的过滤，最终到达 WEB 程&lt;/p&gt;
&lt;h4 id=&#34;3建立tcp连接后发起http请求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3建立tcp连接后发起http请求&#34;&gt;#&lt;/a&gt; 3：建立 TCP 连接后发起 HTTP 请求&lt;/h4&gt;
&lt;p&gt;​      经过 TCP3 次握手之后，浏览器发起了 http 的请求&lt;/p&gt;
&lt;h4 id=&#34;4服务器端响应http请求浏览器得到html代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4服务器端响应http请求浏览器得到html代码&#34;&gt;#&lt;/a&gt; 4：服务器端响应 http 请求，浏览器得到 html 代码&lt;/h4&gt;
&lt;p&gt;​      服务器端 WEB 程序接收到 http 请求以后，就开始处理该请求，处理之后就返回给浏览器 html 文件&lt;/p&gt;
&lt;h4 id=&#34;5浏览器解析html代码并请求html代码中的资源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5浏览器解析html代码并请求html代码中的资源&#34;&gt;#&lt;/a&gt; 5：浏览器解析 html 代码，并请求 html 代码中的资源&lt;/h4&gt;
&lt;p&gt;​      浏览器拿到 html 文件后，就开始解析其中的 html 代码，遇到 js/css/image 等静态资源时，就向服务器端去请求下载（会使用多线程下载，每个浏览器的线程数不一样），这个时候就用上 keep-alive 特性了，建立一次 HTTP 连接，可以请求多个资源，下载资源的顺序就是按照代码里的顺序，但是由于每个资源大小不一样，而浏览器又多线程请求请求资源，所以请求成功显示的顺序并不一定是代码里面的顺序。 浏览器在请求静态资源时（在未过期的情况下），向服务器端发起一个 http 请求（询问自从上一次修改时间到现在有没有对资源进行修改），如果服务器端返回 304 状态码（告诉浏览器服务器端没有修改），那么浏览器会直接读取本地的该资源的缓存文件。&lt;/p&gt;
&lt;h4 id=&#34;6浏览器对页面进行渲染呈现给用户&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6浏览器对页面进行渲染呈现给用户&#34;&gt;#&lt;/a&gt; 6：浏览器对页面进行渲染呈现给用户&lt;/h4&gt;
&lt;p&gt;​      浏览器利用自己内部的工作机制，把请求到的静态资源和 html 代码进行渲染，渲染之后呈现给用户。&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7ccLs1.png&#34; alt=&#34;7ccLs1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7cgpJe.md.png&#34; alt=&#34;7cgpJe.md.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;http请求报文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#http请求报文&#34;&gt;#&lt;/a&gt; HTTP 请求报文&lt;/h3&gt;
&lt;h4 id=&#34;1组成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1组成&#34;&gt;#&lt;/a&gt; 1：组成&lt;/h4&gt;
&lt;p&gt;​      一个 HTTP 请求报文由四个部分组成：请求行、请求头部、空行、请求数据。&lt;/p&gt;
&lt;h4 id=&#34;2服务器端响应http请求浏览器得到html代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2服务器端响应http请求浏览器得到html代码&#34;&gt;#&lt;/a&gt; 2：服务器端响应 http 请求，浏览器得到 html 代码&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;请求行由请求方法字段、URL 字段和 HTTP 协议版本字段 3 个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1&lt;/li&gt;
&lt;li&gt;方法字段就是 HTTP 使用的请求方法，比如常见的 GET/POST&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;其中 HTTP 协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;HTTP1.0 对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0 没有 Host 字段；&lt;/li&gt;
&lt;li&gt;HTTP1.1 在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1 必须有 Host 字段。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3空行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3空行&#34;&gt;#&lt;/a&gt; 3：空行&lt;/h4&gt;
&lt;p&gt;​      它的作用是通过一个空行，告诉服务器请求头部到此为止。&lt;/p&gt;
&lt;h4 id=&#34;4请求数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4请求数据&#34;&gt;#&lt;/a&gt; 4：请求数据&lt;/h4&gt;
&lt;p&gt;​      若方法字段是 GET，则此项为空，没有数据；&lt;/p&gt;
&lt;p&gt;若方法字段是 POST, 则通常来说此处放置的就是要提交的数据；&lt;/p&gt;
&lt;p&gt;比如要使用 POST 方法提交一个表单，其中有 user 字段中数据为 “admin”, password 字段为 123456，那么这里的请求数据就是 user=admin&amp;amp;password=123456，使用 &amp;amp; 来连接各个字段。&lt;/p&gt;
&lt;h4 id=&#34;5http请求报文格式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5http请求报文格式&#34;&gt;#&lt;/a&gt; 5：HTTP 请求报文格式&lt;/h4&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7cgrex.png&#34; alt=&#34;7cgrex.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7cgWSH.png&#34; alt=&#34;7cgWSH.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;7常见的请求头&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7常见的请求头&#34;&gt;#&lt;/a&gt; 7：常见的请求头&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accept&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;指定客户端能够接收的内容类型&lt;/li&gt;
&lt;li&gt;Accept: text/plain, text/html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accept-Charset&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;浏览器可以接受的字符编码集&lt;/li&gt;
&lt;li&gt;Accept-Charset: iso-8859-5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accept-Encoding&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;指定浏览器可以支持的 web 服务器返回内容压缩编码类型&lt;/li&gt;
&lt;li&gt;Accept-Encoding: compress, gzip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accept-Language&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;浏览器可接受的语言&lt;/li&gt;
&lt;li&gt;Accept-Language: en,zh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cache-Control&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;指定请求和响应遵循的缓存机制 Cache-Control: no-cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Connection&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;表示是否需要持久连接 // HTTP 1.1 默认进行持久连接&lt;/li&gt;
&lt;li&gt;Connection: close&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cookie&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 请求发送时，会把保存在该请求域名下的所有 cookie 值一起发送给 web 服务器&lt;/li&gt;
&lt;li&gt;Cookie: role=admin;ssid=1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-Length&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;请求的内容长度&lt;/li&gt;
&lt;li&gt;Content-Length: 348&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-Type&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;请求的与实体对应的 MIME 信息&lt;/li&gt;
&lt;li&gt;Content-Type: application/x-www-form-urlencoded&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Date&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;请求发送的日期和时间&lt;/li&gt;
&lt;li&gt;Date: Tue, 15 Nov 2010 08:12:31 GMT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;From&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;发出请求的用户的 Email&lt;/li&gt;
&lt;li&gt;From:&lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOnVzZXJAZW1haWwuY29t&#34;&gt;user@email.com&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Host&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;指定请求的服务器的域名和端口号&lt;/li&gt;
&lt;li&gt;Host: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5naXRodWIuY29t&#34;&gt;www.github.com&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Max-Forwards&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;限制信息通过代理和网关传送的时间&lt;/li&gt;
&lt;li&gt;Max-Forwards: 10&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Range&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;只请求实体的一部分，指定范围&lt;/li&gt;
&lt;li&gt;Range: bytes=500-999&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Referer&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;先前网页的地址，当前请求网页紧随其后，即来路&lt;/li&gt;
&lt;li&gt;来到当前页面的上一个页面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Referer:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy56Y21oaS5jb20vYXJjaGl2ZXMvNzEuaHRtbA==&#34;&gt;http://www.zcmhi.com/archives/71.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TE&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息&lt;/li&gt;
&lt;li&gt;TE: trailers,deflate;q=0.5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Upgrade&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;向服务器指定某种传输协议以便服务器进行转换（如果支持）&lt;/li&gt;
&lt;li&gt;Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User-Agent&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;User-Agent 的内容包含发出请求的用户信息&lt;/li&gt;
&lt;li&gt;User-Agent: Mozilla/5.0 (Linux; X11)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Via&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;通知中间网关或代理服务器地址，通信协议&lt;/li&gt;
&lt;li&gt;Via: 1.0 fred, 1.1 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25vd2hlcmUuY29t&#34;&gt;nowhere.com&lt;/span&gt; (Apache/1.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http响应报文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#http响应报文&#34;&gt;#&lt;/a&gt; HTTP 响应报文&lt;/h3&gt;
&lt;h4 id=&#34;1响应行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1响应行&#34;&gt;#&lt;/a&gt; 1：响应行&lt;/h4&gt;
&lt;p&gt;​      响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK；&lt;/p&gt;
&lt;p&gt;其中协议版本 HTTP/1.1 或者 HTTP/1.0，200 就是它的状态码，OK 则为它的描述。&lt;/p&gt;
&lt;h4 id=&#34;2响应头&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2响应头&#34;&gt;#&lt;/a&gt; 2：响应头&lt;/h4&gt;
&lt;p&gt;​      响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。 设置 HTTP 响应头往往和状态码结合起来。例如，有好几个表示 “文档位置已经改变” 的状态代码都伴随着一个 Location 头，而 401 (Unauthorized) 状态代码则必须伴随一个 WWW-Authenticate 头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置 Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久 HTTP 连接，…… 等等许多其他任务。&lt;/p&gt;
&lt;h4 id=&#34;3响应体&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3响应体&#34;&gt;#&lt;/a&gt; 3：响应体&lt;/h4&gt;
&lt;p&gt;​      响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是 HTML 页面，那么返回的就是 HTML 代码，如果是 JS 就是 JS 代码，如此之类。&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7cgXlj.png&#34; alt=&#34;7cgXlj.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4常见的响应头&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4常见的响应头&#34;&gt;#&lt;/a&gt; 4：常见的响应头&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accept-Ranges&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;表明服务器是否支持指定范围请求及哪种类型的分段请求&lt;/li&gt;
&lt;li&gt;Accept-Ranges: bytes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Access-Control-Allow-Origin&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;配置有权限访问资源的域&lt;/li&gt;
&lt;li&gt;Access-Control-Allow-Origin: &lt;origin&gt;|*&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Age&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;从原始服务器到代理缓存形成的估算时间（以秒计，非负）&lt;/li&gt;
&lt;li&gt;Age: 12&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Allow&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;对某网络资源的有效的请求行为，不允许则返回 405&lt;/li&gt;
&lt;li&gt;Allow: GET, HEAD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cache-Control&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;告诉所有的缓存机制是否可以缓存及哪种类型&lt;/li&gt;
&lt;li&gt;Cache-Control: no-cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-Encoding&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;web 服务器支持的返回内容压缩编码类型。&lt;/li&gt;
&lt;li&gt;Content-Encoding: gzip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-Language&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;响应体的语言&lt;/li&gt;
&lt;li&gt;Content-Language: en,zh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-Length&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;响应体的长度&lt;/li&gt;
&lt;li&gt;Content-Length: 348&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-Location&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;请求资源可替代的备用的另一地址&lt;/li&gt;
&lt;li&gt;Content-Location: /index.htm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-MD5&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;返回资源的 MD5 校验值&lt;/li&gt;
&lt;li&gt;Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-Range&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;在整个返回体中本部分的字节位置&lt;/li&gt;
&lt;li&gt;Content-Range: bytes 21010-47021/47022&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content-Type&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;返回内容的 MIME 类型&lt;/li&gt;
&lt;li&gt;Content-Type: text/html; charset=utf-8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Date&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;原始服务器消息发出的时间&lt;/li&gt;
&lt;li&gt;Date: Tue, 15 Nov 2010 08:12:31 GMT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Expires&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;响应过期的日期和时间&lt;/li&gt;
&lt;li&gt;Expires: Thu, 01 Dec 2010 16:00:00 GMT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Last-Modified&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;请求资源的最后修改时间&lt;/li&gt;
&lt;li&gt;Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Location&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;用来重定向接收方到非请求 URL 的位置来完成请求或标识新的资源&lt;/li&gt;
&lt;li&gt;Location: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy56Y21oaS5jb20vYXJjaGl2ZXMvOTQuaHRtbA==&#34;&gt;http://www.zcmhi.com/archives/94.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Refresh&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;应用于重定向或一个新的资源被创造，在 5 秒之后重定向（由网景提出，被大部分浏览器支持）&lt;/li&gt;
&lt;li&gt;Refresh: 5; url=http://www.zcmhi.com/archives/94.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;web 服务器软件名称&lt;/li&gt;
&lt;li&gt;Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Set-Cookie&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;设置 Http Cookie Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Strict-Transport-Security&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;设置浏览器强制使用 HTTPS 访问&lt;/li&gt;
&lt;li&gt;max-age: x 秒的时间内 访问对应域名都使用 HTTPS 请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;includeSubDomains: 网站的子域名也启用规则&lt;/li&gt;
&lt;li&gt;Strict-Transport-Security: max-age=1000; includeSubDomains&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trailer&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;指出头域在分块传输编码的尾部存在 Trailer: Max-Forwards&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Transfer-Encoding&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;文件传输编码&lt;/li&gt;
&lt;li&gt;Transfer-Encoding:chunked&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Vary&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;告诉下游代理是使用缓存响应还是从原始服务器请求&lt;/li&gt;
&lt;li&gt;Vary: *&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Via&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;告知代理客户端响应是通过哪里发送的&lt;/li&gt;
&lt;li&gt;Via: 1.0 fred, 1.1 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25vd2hlcmUuY29t&#34;&gt;nowhere.com&lt;/span&gt; (Apache/1.1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WWW-Authenticate&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;表明客户端请求实体应该使用的授权方案&lt;/li&gt;
&lt;li&gt;WWW-Authenticate: Basic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;X-Content-Type-Options&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;配置禁止 MIME 类型嗅探&lt;/li&gt;
&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;X-Frame-Options&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;配置页面是否能出现在 &lt;frame&gt;, &lt;iframe&gt;, &lt;embed&gt;, &lt;object&gt; 等标签中，防止点击劫持&lt;/li&gt;
&lt;li&gt;X-Frame-Options: deny&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;X-XSS-Protection&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;配置 XSS 防护机制&lt;/li&gt;
&lt;li&gt;X-XSS-Protection: 1; mode=block&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http响应码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#http响应码&#34;&gt;#&lt;/a&gt; HTTP 响应码&lt;/h3&gt;
&lt;h4 id=&#34;1xx临时响应-100&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1xx临时响应-100&#34;&gt;#&lt;/a&gt; 1xx (临时响应)   100&lt;/h4&gt;
&lt;p&gt;表示临时响应并需要请求者继续执行操作的状态代码。&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7c2CkT.png&#34; alt=&#34;7c2CkT.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2xx成功-200-201&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2xx成功-200-201&#34;&gt;#&lt;/a&gt; 2xx (成功)   200 201&lt;/h4&gt;
&lt;p&gt;表示成功处理了请求的状态代码。&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7c2A1J.png&#34; alt=&#34;7c2A1J.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3xx重定向-301-302&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3xx重定向-301-302&#34;&gt;#&lt;/a&gt; 3xx (重定向) 301 302&lt;/h4&gt;
&lt;p&gt;表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7c2QhD.png&#34; alt=&#34;7c2QhD.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4xx请求错误-400-401-403-404-405&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4xx请求错误-400-401-403-404-405&#34;&gt;#&lt;/a&gt; 4xx (请求错误) 400 401 403 404 405&lt;/h4&gt;
&lt;p&gt;这些状态代码表示请求可能出错，妨碍了服务器的处理。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7c2dN8.png&#34; alt=&#34;7c2dN8.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;5xx服务器错误-500-501&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5xx服务器错误-500-501&#34;&gt;#&lt;/a&gt; 5xx (服务器错误) 500  501&lt;/h4&gt;
&lt;p&gt;这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7c2B9g.png&#34; alt=&#34;7c2B9g.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;https协议&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#https协议&#34;&gt;#&lt;/a&gt; HTTPS 协议&lt;/h2&gt;
&lt;p&gt;HTTPS (HyperText Transfer Protocol over Secure Socket Layer) 可以理解为 HTTP+SSL/TLS， 即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL。&lt;/p&gt;
&lt;p&gt;HTTPS 默认工作在 TCP 协议 443 端口，它的工作流程一般如以下方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1、TCP 三次同步握手&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2、客户端验证服务器数字证书&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3、DH 算法协商对称加密算法的密钥、hash 算法的密钥&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4、SSL 安全加密隧道协商完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5、网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；用协商的 hash 算法进行数据完整性保护，保证数据不被篡改。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;证书失效或证书验证失败，网站通常会返回如下页面：&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7c2REV.png&#34; alt=&#34;7c2REV.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ca&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ca&#34;&gt;#&lt;/a&gt; CA&lt;/h3&gt;
&lt;p&gt;CA (Certificate Authority) 是颁发数字证书的机构。是负责发放和管理数字证书的权威机构，并作为电子商务交易中受信任的第三方，承担公钥体系中公钥的合法性检验的责任。&lt;/p&gt;
&lt;h3 id=&#34;http-与-https-区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#http-与-https-区别&#34;&gt;#&lt;/a&gt; HTTP 与 HTTPS 区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS 除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;https-的工作原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#https-的工作原理&#34;&gt;#&lt;/a&gt; HTTPS 的工作原理&lt;/h3&gt;
&lt;p&gt;我们都知道 HTTPS 能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用 HTTPS 协议。&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/20/7c2ov9.png&#34; alt=&#34;7c2ov9.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、客户端发起 HTTPS 请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个没什么好说的，就是用户在浏览器里输入一个 https 网址，然后连接到 server 的 443 端口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、服务端的配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;采用 HTTPS 协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面 (startssl 就是个不错的选择，有 1 年的免费服务)。&lt;/p&gt;
&lt;p&gt;这套证书其实就是一对公钥和私钥，如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、传送证书&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、客户端解析证书&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这部分工作是有客户端的 TLS 来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。&lt;/p&gt;
&lt;p&gt;如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密，就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、传送加密信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、服务端解密信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务端用私钥解密后，得到了客户端传过来的随机值 (私钥)，然后把内容通过该值进行对称加密，所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、传输加密后的信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8、客户端解密信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容，整个过程第三方即使监听到了数据，也束手无策。&lt;/p&gt;
</content>
        <updated>2022-01-20T11:12:07.641Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/01/19/daxian%201.2/</id>
        <title>第二天：计算机网络</title>
        <link rel="alternate" href="http://example.com/2022/01/19/daxian%201.2/"/>
        <content type="html">&lt;h1 id=&#34;一-osi七层参考模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-osi七层参考模型&#34;&gt;#&lt;/a&gt; 一： OSI 七层参考模型&lt;/h1&gt;
&lt;p&gt;计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;》》》计算机网络的分类《《《&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;依照&lt;/th&gt;
&lt;th&gt;分类类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;地理范围&lt;/td&gt;
&lt;td&gt;局域网 (LAN)/ 城域网 (MAN)/ 广域网 (WAN)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;交换方式&lt;/td&gt;
&lt;td&gt;线路交换网络 / 报文交换网络 / 分组交换网络&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;拓扑结构&lt;/td&gt;
&lt;td&gt;树形网络 / 总线型网络 / 环形网络 / 网状网络&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;局域网&lt;/strong&gt;：是指范围在几百米到十几公里内办公楼群或校园内的计算机相互连接所构成的计算机网络。计算机局域网被广泛应用于连接校园、工厂以及机关的个人计算机或工作站，以利于个人计算机或工作站之间共享资源（如打印机）和数据通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;城域网&lt;/strong&gt;：所采用的技术基本上与局域网相类似，只是规模上要大一些。城域网既可以覆盖相距不远的几栋办公楼，也可以覆盖一个城市；既可以是私人网，也可以是公用网。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;广域网&lt;/strong&gt;：通常跨接很大的物理范围，如一个国家。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7rqVVs.png&#34; alt=&#34;7rqVVs.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;》〉》通信要素《〈《&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在网络上只要利用 IP 地址就可以找到目标主机，因此要攻击某个网络主机就要应该先确定该目标主机的域名或 IP 地址。&lt;/p&gt;
&lt;p&gt;阐述：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;所谓的ip地址就是一种主机编址方式，给每个连接在Intelnet上的主机分配一个32bit的地址，也称为网际协议地址。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;按照TCP/IP（Transport Control Protocol/Intelnet Protocol，传输控制协议）协议簇的规定，IP地址用二进制来表示，每个IP地址长32bit，换算成字节就是&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;字节（Byte）。例如，一个采用二进制形式的ip地址是“000010100000000000000000001”，这么长的地址处理起来很费劲，为了方便使用，IP地址经常被写成十进制的形式，中间使用&lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;分割不同的字节，即用XXX.XXX.XXX.XXX的形式来表现，每组XXX代表小于等于&lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;的十进制数，例如&lt;span class=&#34;number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.38&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.6&lt;/span&gt;。IP地址的这种表示方法称为“点分十进制表示法”，这显然比二进制的&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;和&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;容易记忆多了。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个完整的 IP 地址信息应该包括：IP 地址 / 子网掩码 / 默认网关 / 和 DNS… 只有四个协同工作时，用户才可以访问 Internet 并被 Internet 的计算机所访问…&lt;/p&gt;
&lt;p&gt;（采用静态 IP 地址接入 Internet 时候，ISP 应当为用户提供全部 IP 地址信息）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP 地址：企业网络使用的合法 IP 地址，由提供 Internet 接入的服务商（ISP）分配公网地址，公网地址可以由网络管理员自由分配。但网络内部的私有 IP 地址不能相同，否则会发生 IP 地址冲突，导致网络连接失败。一般情况，IP 地址可以分为 5 大类别：A 类 / B 类 / C 类 / D 类及 E 类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;重点&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;A类地址以&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;开头，第一个字节作为网络号，地址范围为：&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;~&lt;span class=&#34;number&#34;&gt;127.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;；  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;B类地址以&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;开头，前两个字节作为网络号，地址范围是：&lt;span class=&#34;number&#34;&gt;128.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;~&lt;span class=&#34;number&#34;&gt;191.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;C类地址以&lt;span class=&#34;number&#34;&gt;110&lt;/span&gt;开头，前三个字节作为网络号，地址范围是：&lt;span class=&#34;number&#34;&gt;192.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;~&lt;span class=&#34;number&#34;&gt;223.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;； &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;D类地址以&lt;span class=&#34;number&#34;&gt;1110&lt;/span&gt;开头，地址范围是&lt;span class=&#34;number&#34;&gt;224.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;~&lt;span class=&#34;number&#34;&gt;239.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;，D类地址作为组播地址（一对多的通信）； &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;E类地址以&lt;span class=&#34;number&#34;&gt;1111&lt;/span&gt;开头，地址范围是&lt;span class=&#34;number&#34;&gt;240.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;~&lt;span class=&#34;number&#34;&gt;255.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;，E类地址为保留地址，供以后使用。 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;注：只有A,B,C有网络号和主机号之分，D类地址和E类地址没有划分网络号和主机号。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;255.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;该IP地址指的是受限的广播地址。受限广播地址与一般广播地址（直接广播地址）的区别在于，受限广播地址只能用于本地网络，路由器不会转发以受限广播地址为目的地址的分组；一般广播地址既可在本地广播，也可跨网段广播。		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;例如：主机&lt;span class=&#34;number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;上的直接广播数据包后，另外一个网段&lt;span class=&#34;number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.5&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;也能收到该数据报；若发送受限广播数据报，则不能收到。 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;注：一般的广播地址（直接广播地址）能够通过某些路由器（当然不是所有的路由器），而受限的广播地址不能通过路由器。 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;~&lt;span class=&#34;number&#34;&gt;127.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt; 被用作回环地址，回环地址表示本机的地址，常用于对本机的测试，用的最多的是&lt;span class=&#34;number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;。 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;重点&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;A、B、C类私有地址 私有地址(private address)也叫专用地址，它们不会在全球使用，只具有本地意义。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;A类私有地址：&lt;span class=&#34;number&#34;&gt;10.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;，范围是：&lt;span class=&#34;number&#34;&gt;10.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;~&lt;span class=&#34;number&#34;&gt;10.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;B类私有地址：&lt;span class=&#34;number&#34;&gt;172.16&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;，范围是：&lt;span class=&#34;number&#34;&gt;172.16&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;~&lt;span class=&#34;number&#34;&gt;172.31&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;C类私有地址：&lt;span class=&#34;number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;，范围是：&lt;span class=&#34;number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;~&lt;span class=&#34;number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;子网掩码：子网掩码是于 IP 地址结合使用的一种技术，其主要作用有两个：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​    \1. 用于确定地址中的网络号和主机号&lt;/p&gt;
&lt;p&gt;​    2. 用于将一个大的 IP 网络划分为若干个小自网络（划分子网）&lt;/p&gt;
&lt;p&gt;什么是子网掩码？&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;子网掩码是标志两个IP地址是否同属于一个子网的，也是&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;位二进制地址，其每一个为&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;代表该位是网络位，为&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;代表主机位。它和IP地址一样也是使用点式十进制来表示的。如果两个IP地址在子网掩码的按位与的计算下所得结果相同，即表明它们共属于同一子网中。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;A类地址来说，默认的子网掩码是&lt;span class=&#34;number&#34;&gt;255.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;； 对于B类地址来说默认的子网掩码是&lt;span class=&#34;number&#34;&gt;255.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;； 对于C类地址来说默认的子网掩码是&lt;span class=&#34;number&#34;&gt;255.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.255&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;默认网关：当一台主机找不到可用的网关时，就把数据包发送给指定的默认网关，由这个网管来处理数据包。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（从一个网络向另一个网络发送消息，也必须经过一道 “关口” 这道关口就是网关）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS 地址：DNS 服务用于将用户的域名请求转换为 IP 地址。如果企业网络没有提供 DNS 服务，则 DNS 服务器的 IP 地址应当是 ISP 的 DNS 服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【附件】全国各省市的 DNS 服务器 IP 地址。见附录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;》》》OSI 七层参考模型《《《&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;有了计算机等设备，也就得考虑如何连接起来他们，这就是他们之间该如何通信的问题。对计算机来说，就是一个硬件设备，如何让计算机与计算机连接起来，必需需要软件的支撑。那么支持计算机通讯的软件是什么呢？就是计算机网络参考模型。这个计算机网络参考模型就是计算机网络软件。最经典的当然是国际化标准的OSI（Open System InterConnect 开放式系统互联）参考模型。它是通过一个机器上的一个应用进程与另一个机器上的进程进行信息交互。有了计算机等设备，也就得考虑如何连接起来他们，这就是他们之间该如何通信的问题。对计算机来说，就是一个硬件设备，如何让计算机与计算机连接起来，必需需要软件的支撑。那么支持计算机通讯的软件是什么呢？就是计算机网络参考模型。这个计算机网络参考模型就是计算机网络软件。最经典的当然是国际化标准的OSI（Open System InterConnect 开放式系统互联）参考模型。它是通过一个机器上的一个应用进程与另一个机器上的进程进行信息交互。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;OSI 七层模型概念：&lt;/p&gt;
&lt;p&gt;1：OSI (open system Interconnect), 即开放式系统互联。一般叫 OSI 参考模型，是 ISO (国际标准化组织) 组织在 1985 年研究的网络互联模型。&lt;/p&gt;
&lt;p&gt;2：ISO 为了更好的使网络应用更为普及，推出了 OSI 参考模型。其含义就是推荐所有公司使用这个规范来控制网络。这样所有公司都有相同的规范，就能产生互联。&lt;/p&gt;
&lt;p&gt;3：OSI 定义了网络互联的七层框架（物理层、数据链层、网络层、传输层、会话层、表示层、应用层），即 ISO 开放互连系统参考模型。&lt;/p&gt;
&lt;p&gt;4：每一层实现各自的功能和协议，并完成与相邻层的接口通信。OSI 的服务定义详细说明了各层所提供的服务。某一层的服务就是该层及其下各层的一种功能，它同通过接口提供更高一层。各层所提供的服务与这些服务是怎末实现无关。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7rqaRK.png&#34; alt=&#34;7rqaRK.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;》》》OSI 七层作用介绍《《《&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1：应用层&lt;/p&gt;
&lt;p&gt;应用层是 OSI 参考模型的最高层，是用户与网络的接口。该层通过应用程序来完成网络用户的应用需求，如文件传输、收发电子邮件等。&lt;/p&gt;
&lt;p&gt;【提供与用户的接口，最终呈现给用户】&lt;/p&gt;
&lt;p&gt;2：表示层&lt;/p&gt;
&lt;p&gt;表示层处理流经结点的数据编码的表示方式问题，以保证一个系统应用层发出的信息可被另一系统的应用层读出。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据表示格式转换成网络通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。&lt;/p&gt;
&lt;p&gt;【数据的表示 / 安全 / 压缩】&lt;/p&gt;
&lt;p&gt;3：会话层&lt;/p&gt;
&lt;p&gt;会话层主要功能是管理和协调不同主机上各种进程之间的通信（会话），即负责建立、管理和终止应用程序之间的会话。会话层得名的原因是它很类似于两个实体间的会话概念。例如，一个交互的用户会话以登录到计算机开始，以注销结束。&lt;/p&gt;
&lt;p&gt;【建立用户之间的会话关系】&lt;/p&gt;
&lt;p&gt;4：传输层&lt;/p&gt;
&lt;p&gt;传输层的作用是为上层协议提供端到端的可靠的、透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。&lt;/p&gt;
&lt;p&gt;传输层传送的协议数据单元称为段（data segment）或报文（Message）。&lt;/p&gt;
&lt;p&gt;【定义传输数据的协议端口号以及流控和差错校验】&lt;/p&gt;
&lt;p&gt;5：网络层：&lt;/p&gt;
&lt;p&gt;网络层是为其上层传输层提供服务，传送的协议数据单元称为数据包 (Packet) 或分组。该层的主要作用是解决如何使数据包通过各结点传送的问题，即通过路径选择算法（路由）将数据包送到目的地。另外，为避免通信子网中出现过多的数据包而造成的网络阻塞，需要对流入的数据包数量进行控制（拥塞控制）。当数据包要跨越多个通信子网才能到达目的地时，还要解决网际互连的问题。&lt;/p&gt;
&lt;p&gt;类比：网络层相当于邮局中的信件分拣人员。&lt;/p&gt;
&lt;p&gt;网络层的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;路由选路&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拥塞控制、差错检测与恢复&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络互联&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【进行逻辑地址寻址，实现不同网络之间的路径选择】&lt;/p&gt;
&lt;p&gt;6：数据链层&lt;/p&gt;
&lt;p&gt;数据链路层是为其上层网络层提供服务，解决两个相邻结点之间的通信问题，传送的协议数据单元称为数据帧 (Data frame)。&lt;/p&gt;
&lt;p&gt;数据帧中包含物理地址（又称 MAC 地址）、控制码、数据及校验码等信息。该层的主要作用是通过校验、确认和反馈重发等手段，将不可靠的物理链路转换成对网络层来说无差错的数据链路。&lt;/p&gt;
&lt;p&gt;此外，数据链路层还要协调收发双方的数据传输速率，即进行流量控制，以防止接收方因来不及处理发送方来的高速数据而导致缓冲器溢出及线路阻塞。&lt;/p&gt;
&lt;p&gt;类比：数据链路层相当于邮局中的装拆箱人员。&lt;/p&gt;
&lt;p&gt;数据链层的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;物理地址定义 		网络拓扑机构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链路参数			差错验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理介质访问		流控制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【进行逻辑链接 / 进行硬件地址寻址 / 差错校验等功能】&lt;/p&gt;
&lt;p&gt;7：物理层&lt;/p&gt;
&lt;p&gt;物理层是 OSI 参考模型的最底层，它利用传输介质为其上层数据链路层提供物理连接。它主要关心的是通过物理链路从一个节点向另一个节点传送比特流（bit），物理链路可能是铜缆、光纤、无线或其他的通讯媒介。它关心的问题有：多少伏电压代表 1？多少伏电压代表 0？时钟速率是多少？采用全双工、半双工还是单工通信？&lt;/p&gt;
&lt;p&gt;总的来说物理层关心的是链路的机械、电气、功能和规程特性。&lt;/p&gt;
&lt;p&gt;类比：物理层相当于邮局中的搬运工人。Physical Layer&lt;/p&gt;
&lt;p&gt;物理层的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供传输数据的物理通路，传输数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	【建立 / 维护 / 断开物理层链接】&lt;/p&gt;
&lt;p&gt;记忆口诀：应表会传网数物&lt;/p&gt;
&lt;h1 id=&#34;二tcpip五层模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二tcpip五层模型&#34;&gt;#&lt;/a&gt; 二：TCP/IP 五层模型&lt;/h1&gt;
&lt;p&gt;由于 ISO 指定的 OSI 参考模型过于庞大、复杂、在实现制作过程造成了很多困难，从而招致了很多批评。在现实中，TCP/IP 协议获得了广泛的应用。目前主流的操作系统网络协议基本上都采用了 TCP/IP 协议。而 TCP/IP 与 OSI 在分层模型上稍有区别：OSI 参考模型注重 &amp;quot;通信协议必要的功能是什么&amp;quot;，而 TCP/IP 则更强调 &amp;quot;在计算机上实现协议应该开发那种程序&amp;quot;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;另外一个著名的模型是 TCP/IP 模型，TCP/IP 是传输控制协议 / 网络互联协议的简称；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;早期的 TCP/IP 协议是一个四层结构，在后来的使用过程中借鉴 OSI 的七层参考模型，形成了一个新的五层结构；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP/IP 是一系列协议的集合，所以严格的称呼应该是 TCP/IP 协议簇；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7rqoZj.png&#34; alt=&#34;7rqoZj.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7rqqJ0.png&#34; alt=&#34;7rqqJ0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;1：开放式系统互联模型是一个参考标准，解释协议相互之间应该如何相互作用。TCP/IP 协议是美国国防部发明的，是让互联网成为了目前这个样子的标准之一。&lt;/p&gt;
&lt;p&gt;2：开放式系统互联模型中没有清楚地描绘 TCP/IP 协议，但是在解释 TCP/IP 协议很容易想到开放式系统互联模型。两者的主要区别如下：TCP/IP 协议中的应用层处理开放式系统互联模型中的第五层、第六层和第七层的功能。TCP/IP 协议中的传输层并不能总是保证在传输层可靠地传输数据包，而开放式系统互联模型可以做到。TCP/IP 协议还提供一项名为 UDP（用户数据报协议）的选择。UDP 不能保证可靠的数据包传输。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;》》》模型对应的协议《《《&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7rLSeJ.png&#34; alt=&#34;7rLSeJ.png&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;应用层&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTTP（超文本传输协议 80）：用于浏览器和 Web 服务器之间的请求和响应的交互&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DNS（域名系统 53）：用于连接 DNS 服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMTP（简单邮件传输协议 25）：用于接收邮件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FTP（文件传输协议 21）：用于控制连接 FTP 服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP（传输控制协议）和 UDP（用户数据报协议）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络层 (本层 TCP/IP 定义了 IP 协议，而 IP 协议又由四个支撑协议组成)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ARP（地址解析协议）：用于在局域网中根据 IP 地址获取物理地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RARP（逆地址解析协议）：用于在局域网中通过 ARP 表根据物理地址请求 IP 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ICMP（网际控制报文协议）：用于验证网络是否畅通&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IGMP（网际组管理协议）：用于主机与组播路由器之间组播通信&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;物理层和数据链路层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IEEE802.3 有线局域网（以太网）标准&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IEEE802.11 无线局域网标准&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;》》》TCP 协议《《《&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;在TCP/IP协议中,TCP协议提供可靠的连接服务,采用三次握手建立一个连接.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;TCP是面向连接的通信协议，通过三次握手建立连接，通讯完成时要拆除连接，由于TCP是面向连接的所以只能用于端到端的通讯。TCP提供的是一种可靠的数据流服务，采用&lt;span class=&#34;string&#34;&gt;&amp;quot;带重传的肯定确认&amp;quot;&lt;/span&gt;技术来实现传输的可靠性。TCP还采用一种称为&lt;span class=&#34;string&#34;&gt;&amp;quot;滑动窗口&amp;quot;&lt;/span&gt;的方式进行流量控制，所谓窗口实际表示接收能力，用以限制发送方的发送速度。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;建立TCP连接，就是指建立一个TCP连接时，需要客户端和服务端总共发送&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;个包以确认连接的建立。在socket编程中，这一过程由客户端执行connect来触发。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;重点----注：seq:&lt;span class=&#34;string&#34;&gt;&amp;quot;sequance&amp;quot;&lt;/span&gt;序列号；ack:&lt;span class=&#34;string&#34;&gt;&amp;quot;acknowledge&amp;quot;&lt;/span&gt;确认号；SYN:&lt;span class=&#34;string&#34;&gt;&amp;quot;synchronize&amp;quot;&lt;/span&gt;请求同步标志；；ACK:&lt;span class=&#34;string&#34;&gt;&amp;quot;acknowledge&amp;quot;&lt;/span&gt;确认标志&lt;span class=&#34;string&#34;&gt;&amp;quot;；FIN：&amp;quot;&lt;/span&gt;Finally&lt;span class=&#34;string&#34;&gt;&amp;quot;结束标志。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 TCP 的协议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FTP（文件传输协议）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Telnet（远程登录协议）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SMTP（简单邮件传输协议）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POP3（和 SMTP 相对，用于接收邮件）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP 协议等。&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7rLnwd.png&#34; alt=&#34;7rLnwd.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一次握手&lt;/strong&gt;：Client 将标志位 SYN 置为 1，随机产生一个值 seq=J，并将该数据包发送给 Server，Client 进入 SYN_SENT 状态，等待 Server 确认。&lt;/p&gt;
&lt;p&gt;SYN：同步序列编号 (Synchronize Sequence Numbers)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二次握手&lt;/strong&gt;：Server 收到数据包后由标志位 SYN=1 知道 Client 请求建立连接，Server 将标志位 SYN 和 ACK 都置为 1，ack=J+1，随机产生一个值 seq=K，并将该数据包发送给 Client 以确认连接请求，Server 进入 SYN_RCVD 状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三次握手&lt;/strong&gt;：Client 收到确认后，检查 ack 是否为 J+1，ACK 是否为 1，如果正确则将标志位 ACK 置为 1，ack=K+1，并将该数据包发送给 Server，Server 检查 ack 是否为 K+1，ACK 是否为 1，如果正确则连接建立成功，Client 和 Server 进入 ESTABLISHED 状态，完成三次握手，随后 Client 与 Server 之间可以开始传输数据了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7rLHne.png&#34; alt=&#34;7rLHne.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一次挥手&lt;/strong&gt;：Client 发送一个 FIN，用来关闭 Client 到 Server 的数据传送，Client 进入 FIN_WAIT_1 状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二次挥手&lt;/strong&gt;：Server 收到 FIN 后，发送一个 ACK 给 Client，确认序号为收到序号 + 1（与 SYN 相同，一个 FIN 占用一个序号），Server 进入 CLOSE_WAIT 状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三次挥手&lt;/strong&gt;：Server 发送一个 FIN，用来关闭 Server 到 Client 的数据传送，Server 进入 LAST_ACK 状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四次挥手&lt;/strong&gt;：Client 收到 FIN 后，Client 进入 TIME_WAIT 状态，接着发送一个 ACK 给 Server，确认序号为收到序号 + 1， Server 进入 CLOSED 状态，完成四次挥手。&lt;/p&gt;
&lt;p&gt;【问题 1】为什么连接的时候是三次握手，关闭的时候却是四次握手？ 答：因为当 Server 端收到 Client 端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中 ACK 报文是用来应答的，SYN 报文是用来同步的。但是关闭连接时，当 Server 端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉 Client 端，“你发的 FIN 报文我收到了”。只有等到我 Server 端所有的报文都发送完了，我才能发送 FIN 报文，因此不能一起发送。故需要四步握手。&lt;/p&gt;
&lt;p&gt;如果有大量的连接，每次在连接、关闭时都要三次握手，四次挥手，会很明显会造成性能低下，因此，HTTP 有一种叫做 keep connection 的机制，它可以在传输数据后仍然保持连接，当客户端再次获取数据时，直接使用刚刚空闲下的连接而无需再次握手…&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7rOi7j.png&#34; alt=&#34;7rOi7j.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;》》》UDP 协议《《《&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UDP 用户数据报协议，是面向无连接的通讯协议，UDP 数据包括目的端口号和源端口号信息，由于通讯不需要连接，所以可以实现广播发送。&lt;/p&gt;
&lt;p&gt;UDP 通讯时不需要接收方确认，属于不可靠的传输，可能会出现丢包现象，实际应用中要求程序员编程验证。&lt;/p&gt;
&lt;p&gt;UDP 与 TCP 位于同一层，但它不管数据包的顺序、错误或重发。因此，UDP 不被应用于那些使用虚电路的面向连接的服务，UDP 主要用于那些面向查询 — 应答的服务，例如 NFS。相对于 FTP 或 Telnet，这些服务需要交换的信息量较小。&lt;/p&gt;
&lt;p&gt;每个 UDP 报文分 UDP 报头和 UDP 数据区两部分。报头由四个 16 位长（2 字节）字段组成，分别说明该报文的源端口、目的端口、报文长度以及校验值。UDP 报头由 4 个域组成，其中每个域各占用 2 个字节，具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;（1）源端口号；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（2）目标端口号；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（3）数据报长度；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（4）校验值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 UDP 协议包括：TFTP（简单文件传输协议）、SNMP（简单网络管理协议）、DNS（域名解析协议）、NFS、BOOTP。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;》》》TCP 和 UDP 的区别《《《&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;：连接方面区别： i：TCP面向连接（如打电话要先拨号建立连接）。 ii：UDP是无连接的，即发送数据之前不需要建立连接。 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;：安全方面的区别： i：TCP提供可靠的服务，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达。 ii：UDP尽最大努力交付，即不保证可靠交付。 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;：传输效率的区别： i：TCP传输效率相对较低。 ii：UDP传输效率高，适用于对高速传输和实时性有较高的通信或广播通信。 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;：连接对象数量的区别： i：TCP连接只能是点到点、一对一的。 ii：UDP支持一对一，一对多，多对一和多对多的交互通信。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;》》》数据封装与解封装过程《《《&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7rOauD.png&#34; alt=&#34;7rOauD.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 数据封装过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.&lt;/span&gt;在应用层，用户的数据被转换成二进制数据 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2.&lt;/span&gt;在传输层，上层数据被分割成很小的数据段，并为每个分段后的数据封装TCP报文头部&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3.&lt;/span&gt;在网络层，上层数据被封装上新的报文头部——IP头部 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4.&lt;/span&gt;在数据链路层，上层数据被封装一个MAC头部，其内部有一个关键的字段信息——MAC地址 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;5.&lt;/span&gt;在物理层，无论在之前封装的报文头部还是上层的数据信息都是由二进制数组成的，在物理层，将这些二进制数字组成的比特流转换成电信号在网络中传输&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​      2. 数据解封装过程&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;数据被封装完毕通过网络传输到接收方以后，将进入数据的解封装过程，这将是封装过程的一个逆过程 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.&lt;/span&gt;在物理层，首先将电信号转换成二进制数据，并将数据数据送至数据链路层 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2.&lt;/span&gt;在数据链路层，查看目标MAC地址，如果吻合就“拆掉”，将剩下的数据送往上一层&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3.&lt;/span&gt;在网络层，核实目标IP地址是否与自己的IP地址相同，从而确定是否送至上一层 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4.&lt;/span&gt;在传输层，首先根据TCP头部判断数据送往哪个应用层协议或应用程序，将之前被分组的数据段重组，再送往上一层 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;5.&lt;/span&gt;在应用层，这些二进制数据将经历复杂的解码过程还原成发送者所输送的最初信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;》》》数据传输基本概念《《《&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于 OSI 模型而言，每一层都是通过协议数据单元来进行通信的，而对于 TCP/IP 五层模型，也可以沿用这个概念&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PDU（协议数据单元）是指同层之间传递的数据单位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用数据需要经过 TCP/IP 每一层处理之后才能传输到目的端，每一层都使用该层的协议数据单元 PDU 彼此交换信息，不同层的 PDU 中包含有不同的信息，因此 PDU 在不同层被赋予了不同的名称&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7rO68P.png&#34; alt=&#34;7rO68P.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;》》》硬件设备对应五层模型《《《&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设备属于哪一层要看这个设备主要工作在哪一层，有什么对应的功能…&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7rO4Ej.png&#34; alt=&#34;7rO4Ej.png&#34;&gt;&lt;/p&gt;
</content>
        <updated>2022-01-19T09:35:23.393Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/01/19/daxian%201.1/</id>
        <title>第一天：计算机组成</title>
        <link rel="alternate" href="http://example.com/2022/01/19/daxian%201.1/"/>
        <content type="html">&lt;h1 id=&#34;一计算机组成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一计算机组成&#34;&gt;#&lt;/a&gt; 一。计算机组成&lt;/h1&gt;
&lt;h2 id=&#34;1计算机组成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1计算机组成&#34;&gt;#&lt;/a&gt; 1. 计算机组成&lt;/h2&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7r40W4.png&#34; alt=&#34;7r40W4.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;11硬件系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11硬件系统&#34;&gt;#&lt;/a&gt; 1.1：硬件系统&lt;/h3&gt;
&lt;h4 id=&#34;i中央处理器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#i中央处理器&#34;&gt;#&lt;/a&gt; i：中央处理器&lt;/h4&gt;
&lt;p&gt;运算器、控制器统称中央处理器（cpu）：负责数据的算数运算和逻辑运算，及数据的加工处理，是整个计算机的中枢神经，分析程序的可控制信息，并根据程序要求进行控制，协调计算机各部分组件工作及内存与外设的访问等。&lt;/p&gt;
&lt;h4 id=&#34;ii存储器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ii存储器&#34;&gt;#&lt;/a&gt; ii：存储器&lt;/h4&gt;
&lt;p&gt;实现记忆功能的部件，用来存储程序、数据和各种信号、命令等信息、并在需要时提供这些信息。内存（rom 只读存储器；ram 随机存储器；断电就会消失）；外存（硬盘、软盘、光盘）。&lt;/p&gt;
&lt;h4 id=&#34;iii输入输出设备&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#iii输入输出设备&#34;&gt;#&lt;/a&gt; iii：输入输出设备&lt;/h4&gt;
&lt;p&gt;计算机从输入设备获得外部的信息。输入设备将外部信息以一定的数据格式送入系统，并由输出设备输出。如：键盘输入一首歌曲名称，将这一数据送入系统，音响播放。&lt;/p&gt;
&lt;h3 id=&#34;12软件系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12软件系统&#34;&gt;#&lt;/a&gt; 1.2：软件系统&lt;/h3&gt;
&lt;p&gt;操作系统主要作用是管理好硬件设备。&lt;/p&gt;
&lt;h4 id=&#34;i桌面操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#i桌面操作系统&#34;&gt;#&lt;/a&gt; i：桌面操作系统&lt;/h4&gt;
&lt;p&gt;window 系列：用户群体大&lt;/p&gt;
&lt;p&gt;macOS：适合于开发人员&lt;/p&gt;
&lt;p&gt;linux：应用软件少&lt;/p&gt;
&lt;h4 id=&#34;ii服务器操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ii服务器操作系统&#34;&gt;#&lt;/a&gt; ii：服务器操作系统&lt;/h4&gt;
&lt;p&gt;linux：安全、稳定、免费；占有率高&lt;/p&gt;
&lt;p&gt;windows server：收费；占有率低&lt;/p&gt;
&lt;h4 id=&#34;iii嵌入式操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#iii嵌入式操作系统&#34;&gt;#&lt;/a&gt; iii：嵌入式操作系统&lt;/h4&gt;
&lt;p&gt;linux：体积小&lt;/p&gt;
&lt;p&gt;主要运用：机顶盒、网络电话、手机等等&lt;/p&gt;
&lt;h4 id=&#34;iiii移动设备操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#iiii移动设备操作系统&#34;&gt;#&lt;/a&gt; iiii：移动设备操作系统&lt;/h4&gt;
&lt;p&gt;IOS&lt;/p&gt;
&lt;p&gt;Android（基于 linux）&lt;/p&gt;
&lt;h2 id=&#34;2进制的转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2进制的转换&#34;&gt;#&lt;/a&gt; 2: 进制的转换&lt;/h2&gt;
&lt;h3 id=&#34;21什么是进制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21什么是进制&#34;&gt;#&lt;/a&gt; 2.1：什么是进制？&lt;/h3&gt;
&lt;p&gt;进制也就是进位计数制，是人为定义的带进位的计数方法（有不带进位的计数方法，比如原始的结绳计数法，唱票时常用的 “正” 字计数法）。 对于任何一种进制 —X 进制，就表示每一位置上的数运算时都是逢 X 进一位。 十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x 进制就是逢 x 进位。&lt;/p&gt;
&lt;h3 id=&#34;22-二进制转换十进制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22-二进制转换十进制&#34;&gt;#&lt;/a&gt; 2.2 ：二进制转换十进制&lt;/h3&gt;
&lt;p&gt;二进制转为十进制要从右到左用二进制的每个数去乘以 2 的相应次方，小数点后则是从左往右。&lt;/p&gt;
&lt;p&gt;如果首位是 0 就表示正整数，如果首位是 1 则表示负整数，正整数可以直接换算，负整数则需要先取反再换算。&lt;/p&gt;
&lt;p&gt;因为计算机内部表示数的字节单位是定长的。如 8 位、16 位、32 位。所以位数不够时，高位补零。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如要想二进制 00101010 转为十进制，因为以 0 开头，所以这是正整数，计算如下所示：&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7rI4sA.png&#34; alt=&#34;7rI4sA.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-整数转二进制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23-整数转二进制&#34;&gt;#&lt;/a&gt; 2.3： 整数转二进制&lt;/h3&gt;
&lt;p&gt;采用 &amp;quot;除 2 取余，逆序排列&amp;quot; 法：&lt;/p&gt;
&lt;p&gt;1. 首先用 2 整除一个十进制整数，得到一个商和余数&lt;br&gt;
 2. 然后再用 2 去除得到的商，又会得到一个商和余数&lt;br&gt;
 3. 重复操作，一直到商为小于 1 时为止&lt;br&gt;
 4. 然后将得到的所有余数全部排列起来，再将它反过来（逆序排列），切记一定要反过来！&lt;/p&gt;
&lt;p&gt;假设我们现在需要将 42 转为二进制，那我们怎么做呢，如下图所示：&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7roEQJ.png&#34; alt=&#34;7roEQJ.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;24小数转二进制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24小数转二进制&#34;&gt;#&lt;/a&gt; 2.4：小数转二进制&lt;/h3&gt;
&lt;p&gt;采用 &amp;quot;乘 2 取整，顺序排列&amp;quot; 法：&lt;/p&gt;
&lt;p&gt;1. 用 2 乘十进制小数，可以得到积，将积的整数部分取出&lt;br&gt;
 2. 再用 2 乘余下的小数部分，又得到一个积，再将积的整数部分取出&lt;br&gt;
 3. 重复操作，直到积中的小数部分为零，此时 0 或 1 为二进制的最后一位，或者达到所要求的精度为止&lt;/p&gt;
&lt;p&gt;例如将 0.125 转换为二进制：&lt;/p&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7roteI.png&#34; alt=&#34;7roteI.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;25十六进制转十进制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#25十六进制转十进制&#34;&gt;#&lt;/a&gt; 2.5：十六进制转十进制&lt;/h3&gt;
&lt;p&gt;1、首先明白 16 进制数（从右到左数是第 0 位，第 1 位，第 2 位……）的第 0 位的权值为 16 的 0 次方，第 1 位的权值为 16 的 1 次方，第 2 位的权值为 16 的 2 次方，依次这样排列下去。&lt;/p&gt;
&lt;p&gt;2、明白 ABCDEF 表示的二进制数字分别是 10，11，12，13，14，15。&lt;/p&gt;
&lt;p&gt;3、十六进制转换成十进制的公式是：要从右到左用二进制的每个数去乘以 16 的相应次方，然后这些数字相加就是了。&lt;/p&gt;
&lt;p&gt;例 1：2AF5 换算成 10 进制:&lt;/p&gt;
&lt;p&gt;第 0 位： 5 * 16^0 = 5&lt;/p&gt;
&lt;p&gt;第 1 位： F * 16^1 =15*16^1= 240&lt;/p&gt;
&lt;p&gt;第 2 位： A * 16^2= 10* 16^2=2560&lt;/p&gt;
&lt;p&gt;第 3 位： 2 * 16^3 = 8192&lt;/p&gt;
&lt;p&gt;结果就是：5 * 16^0 + 15 * 16^1 + 10 * 16^2 + 2 * 16^3 = 10997&lt;/p&gt;
&lt;p&gt;例 2：CE 换算成 10 进制:&lt;/p&gt;
&lt;p&gt;第 0 位：E*16&lt;sup&gt;0=14*16&lt;/sup&gt;0=14&lt;/p&gt;
&lt;p&gt;第 1 位：C*16&lt;sup&gt;1=12*16&lt;/sup&gt;1=192&lt;/p&gt;
&lt;p&gt;结果就是：14*16&lt;sup&gt;0+12*16&lt;/sup&gt;1=206&lt;/p&gt;
&lt;h3 id=&#34;28拓展资料&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#28拓展资料&#34;&gt;#&lt;/a&gt; 2.8：拓展资料&lt;/h3&gt;
&lt;p&gt;16 进制即逢 16 进 1，每一位上可以是从小到大为 0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F 共 16 个大小不同的数。16 进制转换即 16 进制与其他不同进制之间的换算转换。&lt;/p&gt;
&lt;h2 id=&#34;3服务协议与端口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3服务协议与端口&#34;&gt;#&lt;/a&gt; 3：服务，协议与端口&lt;/h2&gt;
&lt;h3 id=&#34;31常见的计算机服务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31常见的计算机服务&#34;&gt;#&lt;/a&gt; 3.1：常见的计算机服务&lt;/h3&gt;
&lt;p&gt;计算机中的服务是一种应用程序类型，在后台运行。服务应用程序通常可以在本地和通过网络为用户提供一些功能，例如客户端 / 服务器应用程序、Web 服务器、数据库服务器以及其他基于服务器的应用程序。&lt;/p&gt;
&lt;h3 id=&#34;32常见的计算机服务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32常见的计算机服务&#34;&gt;#&lt;/a&gt; 3.2：常见的计算机服务&lt;/h3&gt;
&lt;p&gt;[&lt;img data-src=&#34;https://s4.ax1x.com/2022/01/19/7r7kr9.png&#34; alt=&#34;7r7kr9.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4dos命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4dos命令&#34;&gt;#&lt;/a&gt; 4:Dos 命令&lt;/h2&gt;
&lt;h3 id=&#34;41运行命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41运行命令&#34;&gt;#&lt;/a&gt; 4.1：&amp;quot;运行&amp;quot; 命令&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;gpedit.msc 		 组策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lusrmgr.msc 		本地用户和组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;services.msc 		本地服务设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;compmgmt.msc 		计算机管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;taskmgr				任务管理器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;diskmgmt.msc 		磁盘管理程序&lt;/p&gt;
&lt;p&gt;devmgmt.msc 		设备管理器&lt;/p&gt;
&lt;p&gt;fsmgmt.msc 		 共享文件夹管理&lt;/p&gt;
&lt;p&gt;chkdsk.exe 		 chkdsk 磁盘检查&lt;/p&gt;
&lt;p&gt;msconfig.exe 		 系统配置 (引导 服务 启动 工具)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mstsc 		 远程桌面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;regedit					注册表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mspaint 		 画图&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;write 		 写字板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;notepad 		打开记事本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;calc 		 打开计算器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;explorer 		 打开资源管理器&lt;/p&gt;
&lt;p&gt;logoff 		 注销命令&lt;/p&gt;
&lt;p&gt;shutdown 		60 秒倒计时关机&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dos 命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;cpn：内容分发网络；&lt;/p&gt;
&lt;p&gt;cdn 防止攻击，分发多个地址（DDoS 攻击）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从 3389&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pid 管道符到 netstat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;quser 当前登录的用户&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;set 		显示当前所有环境变量（键值对形式出现）&lt;/p&gt;
&lt;p&gt;dir 		查看当前目录下所有文件及文件夹；&lt;/p&gt;
&lt;p&gt;dir /a 				显示包含隐藏文件的所有内容&lt;/p&gt;
&lt;p&gt;whoami 		查看当前计算机及当前用户名称&lt;/p&gt;
&lt;p&gt;ipconfig 		产看 ip 信息&lt;/p&gt;
&lt;p&gt;tasklist -svc 		 查看服务对应 PId&lt;/p&gt;
&lt;p&gt;tasklist 		 显示当前运行程序的 pid，会话，进程、服务&lt;/p&gt;
&lt;p&gt;systeminfo 		 查看计算机详细信息&lt;/p&gt;
&lt;p&gt;attrib 		文件 / 文件夹 ：查看文件或文件夹信息&lt;/p&gt;
&lt;p&gt;tree 		树状图显示文件夹及文件&lt;/p&gt;
&lt;p&gt;type + 文件名 	 查看文件 ，内容，如 type 1.txt 查看 1.txt 文件内容&lt;/p&gt;
&lt;p&gt;start	+ 文件名	 	运行记事本并查看 1.txt 文本内容，如 start 1.txt&lt;/p&gt;
&lt;p&gt;restart 重启&lt;/p&gt;
&lt;p&gt;more + 文件名		 		分屏查看，如 more 1.txt 分屏查看 1.txt 内容&lt;/p&gt;
&lt;p&gt;at			 		 查看计划任务（windows10 废除)&lt;/p&gt;
&lt;p&gt;arp -a 				查看网内主机&lt;/p&gt;
&lt;p&gt;net user				查看当前计算机所有用户&lt;/p&gt;
&lt;p&gt;net user 账户名	 查看账户属性&lt;/p&gt;
&lt;p&gt;net start 				查看开启的服务&lt;/p&gt;
&lt;p&gt;net start\stop 服务名 	启动服务 / 关闭服务&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;net view				查看本地局域网内开启了那些共享&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;net view ip 		查看对方局域网内开启的共享&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;net config 			显示系统网络设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;net share 			查看本地开启的共享&lt;/p&gt;
&lt;p&gt;netstat -an（an 用处更大）	 查看开启的端口&lt;/p&gt;
&lt;p&gt;netstat -ano	 		查看端口占用情况&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;nslookup				查询 DNS 的记录，查询域名解析，用来诊断网络问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;tracert				路由追踪 （默认跳转 30 个跃点跟踪）&lt;/p&gt;
&lt;p&gt;systeminfo	 		 查看计算机详细信息&lt;/p&gt;
&lt;p&gt;ping 	网络地址 回车 	测试当前。计算机与要访问计算机联通情况&lt;/p&gt;
&lt;p&gt;cd					 切换目录&lt;/p&gt;
&lt;p&gt;cd… 			 		 返回上一级&lt;/p&gt;
&lt;p&gt;cd \ 			 		 切换到根目录&lt;/p&gt;
&lt;p&gt;cd .&amp;gt; test.txt 	 		 创建 test.txt 文件&lt;/p&gt;
&lt;p&gt;E：					 跳转到 e 盘&lt;/p&gt;
&lt;p&gt;md test 		 	 创建 test 目录&lt;/p&gt;
&lt;p&gt;rd test				删除 test 目录&lt;/p&gt;
&lt;p&gt;rd test \s 			删除时需要确认&lt;/p&gt;
&lt;p&gt;rd test				删除 test 目录&lt;/p&gt;
&lt;p&gt;copy con test.txt 	dos 创建文件并在 dos 写入，存在即覆盖原完成后 ctrl+z 回车&lt;/p&gt;
&lt;p&gt;del test.txt 			删除 test.txt 加 -f 强制删除&lt;/p&gt;
&lt;p&gt;copy			 	 复制 / 合并，例：copy 1.txt/a + 2.jpg/b 3.jpg/c （/a b c 字符集）把 1.txt 和 2.jpg 合并到	3.jpg 中&lt;/p&gt;
&lt;p&gt;move 				移动 / 重命名&lt;/p&gt;
&lt;p&gt;​					例 move 1.txt test 把 1.txt 移动到 test 目录&lt;/p&gt;
&lt;p&gt;​					move 1.txt test.txt 把 1.txt 重命名为 test.txt&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;net user a a/add 添加一个新用户为 a net localgroup administrators a /add&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ren				 重命名 用法同上&lt;/p&gt;
&lt;p&gt;attrib 文件 / 目录名	 -a -r -s -h&lt;/p&gt;
&lt;p&gt;​			 去掉文件 / 文件夹的存档 只读 系统 隐藏 的属性 ＋号相反 ipconfig /relese 		释放 ip /new 重新获取 ip&lt;/p&gt;
&lt;p&gt;net start 服务名 			开启某服务 （stop 停止）（restart 重启）&lt;/p&gt;
&lt;p&gt;shutdown -s 				一分钟后关机&lt;/p&gt;
&lt;p&gt;shutdown -s -t 100 -c “bye”	100 秒后关机并弹出 bye 消息&lt;/p&gt;
&lt;p&gt;shutdown -a 				取消计划的关机任务&lt;/p&gt;
&lt;p&gt;at id 时间 				在指定时间内开启一个已注册的 id 任务&lt;/p&gt;
&lt;p&gt;at \delete 				删除计划任务&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;net use K: \ip \c$ 		映射目标 ip 的 c 盘到本地 k 盘&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;net use k: \ip \c$ \del 		删除映射的 k 盘&lt;/p&gt;
&lt;p&gt;taskkill \f \im xx.exe 		 强行杀死 xx.exe 进程 c&lt;/p&gt;
&lt;p&gt;findstr “Hello” aa.txt 			在 aa.txt 文件中寻找字符串 hello&lt;/p&gt;
&lt;p&gt;find 	文件名				 查找某文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;echo hello » pass.txt 		将 hello 追加到 pass.txt 文件中 (一个&amp;gt; 直接覆盖原内容)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;color 02 					把 cmd 中的字 改为黑色背景绿色字体&lt;/p&gt;
&lt;p&gt;cls 						清屏&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;批处理命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所谓的批处理，也就是将多条基本的 dos 命令写入一个.bat 的批处理文件，批处理会自上而下的完成一些文件内的命令，从而实现一些功能。&lt;/p&gt;
&lt;p&gt;@echo off	关闭系统盘符回显&lt;/p&gt;
&lt;p&gt;color xx	设置颜色&lt;/p&gt;
&lt;p&gt;pause		暂停，按下按键继续&lt;/p&gt;
&lt;p&gt;title xxx	修改窗口标题&lt;/p&gt;
&lt;p&gt;echo.		换行显示&lt;/p&gt;
&lt;p&gt;:xx		区分代码块，单独使用没有效果，结合 goto 使用&lt;/p&gt;
&lt;p&gt;goto xx		跳转到某区块&lt;/p&gt;
&lt;p&gt;start		后面跟会文件，网址，程序等都会被打开，为空白会默认打开 cmd&lt;/p&gt;
&lt;p&gt;&amp;gt;nul 2&amp;gt;nul 	正确的错误的一起屏蔽掉，啥也不显示了&lt;/p&gt;
&lt;p&gt;set x=100	设置变量 a=100&lt;/p&gt;
&lt;p&gt;set /p x = 提示		提示用户，并获取用户键盘输入，然后传给 x&lt;/p&gt;
&lt;p&gt;% x%			调用变量&lt;/p&gt;
&lt;p&gt;exit			退出批处理。&lt;/p&gt;
</content>
        <updated>2022-01-19T08:44:09.376Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/01/18/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="http://example.com/2022/01/18/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Quick-Start&#34;&gt;&lt;a href=&#34;#Quick-Start&#34; class=&#34;headerlink&#34; title=&#34;Quick Start&#34;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&#34;Create-a-new-post&#34;&gt;&lt;a href=&#34;#Create-a-new-post&#34; class=&#34;headerlink&#34; title=&#34;Create a new post&#34;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/writing.html&#34;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Run-server&#34;&gt;&lt;a href=&#34;#Run-server&#34; class=&#34;headerlink&#34; title=&#34;Run server&#34;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/server.html&#34;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Generate-static-files&#34;&gt;&lt;a href=&#34;#Generate-static-files&#34; class=&#34;headerlink&#34; title=&#34;Generate static files&#34;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/generating.html&#34;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Deploy-to-remote-sites&#34;&gt;&lt;a href=&#34;#Deploy-to-remote-sites&#34; class=&#34;headerlink&#34; title=&#34;Deploy to remote sites&#34;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
        <updated>2022-01-18T10:19:47.074Z</updated>
    </entry>
</feed>
